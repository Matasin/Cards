{"version":3,"sources":["components/Card.js","components/CardContainer.js","App.js","serviceWorker.js","index.js"],"names":["Card","picture","name","email","data","country","phone","city","street","password","useState","value","setValue","secondValue","setSecondValue","handleBothValue","firstValue","className","src","alt","onMouseOver","substring","indexOf","CardContainer","state","loading","user","fetch","response","json","this","setState","results","style","textAlign","large","first","last","dob","date","location","number","login","React","Component","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6QAyFeA,EAtFF,SAAC,GAUH,IATCC,EASF,EATEA,QACAC,EAQF,EAREA,KACAC,EAOF,EAPEA,MACAC,EAMF,EANEA,KACAC,EAKF,EALEA,QAGAC,GAEF,EAJEC,KAIF,EAHEC,OAGF,EAFEF,OACAG,EACF,EADEA,SACF,EAEwBC,mBAAS,qBAFjC,mBAEKC,EAFL,KAEYC,EAFZ,OAGoCF,mBAASR,GAH7C,mBAGKW,EAHL,KAGkBC,EAHlB,KAKIC,EAAkB,SAACC,EAAYH,GACjCD,EAASI,GACTF,EAAeD,IAEnB,OACI,yBAAKI,UAAU,QACX,6BACI,yBAAKC,IAAMjB,EAAUkB,IAAMlB,IAC3B,6BAFJ,MAKA,wBAAIgB,UAAU,oBACV,+BAAMN,EAAN,KACA,+BAAME,EAAN,OAGJ,yBAAKI,UAAU,sBACX,yBAAKA,UAAU,oCACX,4BAAQA,UAAU,oBACdG,YAAc,kBAAML,EAAgB,aAAcb,MAEtD,4BACIe,UAAU,kBACVG,YAAc,kBAAML,EAAgB,cAAeZ,MAEvD,4BACIc,UAAU,6BACVG,YAAc,kBAAML,EAAgB,iBAAkBX,EAAKiB,UAAU,GAAIjB,EAAKkB,QAAQ,UAE1F,4BACIL,UAAU,oBACVG,YAAc,kBAAML,EAAgB,YAAaV,MAErD,4BACIY,UAAU,qBACVG,YAAc,kBAAML,EAAgB,qBAAsBT,MAE9D,4BACIW,UAAW,sBACXG,YAAc,kBAAML,EAAgB,cAAeN,UCHhEc,E,kDAjDX,aAAe,IAAD,8BACV,gBACKC,MAAQ,CACTC,SAAS,EACTC,KAAM,MAJA,E,wLASE,6B,SACWC,MADX,8B,cACNC,E,gBACaA,EAASC,O,OAAtBzB,E,OACN0B,KAAKC,SAAS,CAAEL,KAAMtB,EAAK4B,QAAQ,GAAIP,SAAS,I,qIAGhD,GAAIK,KAAKN,MAAMC,QACX,OAAO,yBAAKQ,MAAO,CAACC,UAAW,WAAxB,kDAMX,IAAMR,EAAOI,KAAKN,MAAME,KACxB,OACI,yBAAKT,UAAU,iBACX,kBAAC,EAAD,CACIhB,QAAWyB,EAAKzB,QAAQkC,MAExBjC,KAAQwB,EAAKxB,KAAKkC,MAAQ,OAASV,EAAKxB,KAAKmC,KAE7ClC,MAASuB,EAAKvB,MAEdC,KAAQsB,EAAKY,IAAIC,KAEjBlC,QAAWqB,EAAKc,SAASnC,QACzBE,KAAQmB,EAAKc,SAASjC,KACtBC,OAAUkB,EAAKc,SAAShC,OAAON,KAAO,OAASwB,EAAKc,SAAShC,OAAOiC,OAEpEnC,MAASoB,EAAKpB,MAEdG,SAAYiB,EAAKgB,MAAMjC,gB,GAzCfkC,IAAMC,WCGnBC,EAFH,kBAAM,kBAAC,EAAD,OCOEC,QACW,cAA7BC,OAAOP,SAASQ,UAEe,UAA7BD,OAAOP,SAASQ,UAEhBD,OAAOP,SAASQ,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4713ffd5.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n// import InformationButton from './InformationButton'\r\n\r\nconst Card = ({ \r\n            picture,\r\n            name,\r\n            email,\r\n            data, \r\n            country,\r\n            city, \r\n            street,\r\n            phone, \r\n            password,\r\n    }) => {\r\n\r\n        const [value, setValue] = useState('Hello, my name is'); // Basic value\r\n        const [secondValue, setSecondValue] = useState(name); // Basic valu\r\n\r\n        const handleBothValue = (firstValue, secondValue) => {\r\n            setValue(firstValue);\r\n            setSecondValue(secondValue);\r\n        };\r\n        return (\r\n            <div className='Card'>\r\n                <div>\r\n                    <img src={ picture } alt={ picture }/>\r\n                    <hr />  {/* beta */}\r\n                </div>\r\n            \r\n                <h1 className='PresentationData'>\r\n                    <p> { value } </p>\r\n                    <p> { secondValue }  </p>\r\n                </h1>\r\n                \r\n                <div className='InformationButtons'>\r\n                    <div className=\"InformationButtons__HoverButtons\">\r\n                        <button className=\"far fa-user fa-4x\"  //Work!!!\r\n                            onMouseOver={ () => handleBothValue('My name is', name) }>\r\n                        </button>\r\n                        <button \r\n                            className=\"fas fa-at fa-4x\" \r\n                            onMouseOver={ () => handleBothValue('My email is', email) }>\r\n                        </button>\r\n                        <button \r\n                            className=\"fas fa-birthday-cake fa-4x\"\r\n                            onMouseOver={ () => handleBothValue('I was born in ', data.substring(10, data.indexOf('?'))  ) }>\r\n                        </button>\r\n                        <button \r\n                            className=\"fas fa-home fa-4x\" \r\n                            onMouseOver={ () => handleBothValue('I live in', country) }>\r\n                        </button>\r\n                        <button \r\n                            className=\"fas fa-phone fa-4x\" \r\n                            onMouseOver={ () => handleBothValue('My phone number is', phone) }>\r\n                        </button>\r\n                        <button\r\n                            className= \"fas fa-unlock fa-4x\" \r\n                            onMouseOver={ () => handleBothValue('My password', password)  }>\r\n                        </button> \r\n                    </div>\r\n                </div>\r\n            </div>\r\n    )\r\n}\r\n        // const arrayOfInformationButtonsClassNames = [\r\n        //     'far fa-user fa-4x',\r\n        //     \"fas fa-at fa-4x\",\r\n        //     \"fas fa-birthday-cake fa-4x\",\r\n        //     \"fas fa-home fa-4x\",\r\n        //     \"fas fa-phone fa-4x\",\r\n        //     \"fas fa-unlock fa-4x\",\r\n        // ];\r\n        // const arrayOfFirstValue = [\r\n        //     'Hello, I am',\r\n        //     'My email is',\r\n        //     'I was born in',\r\n        //     'I live in',\r\n        //     'My phone',\r\n        //     'My password',\r\n        // ];\r\n        // const arrayOfSecondValue = [\r\n        //     picture,\r\n        //     name,\r\n        //     email,\r\n        //     data, \r\n        //     country,\r\n        //     phone, \r\n        //     password,\r\n        // ];\r\nexport default Card;","import React from \"react\";\r\n\r\nimport Card from \"./Card\";\r\n\r\nclass CardContainer extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            loading: true,\r\n            user: null\r\n        };\r\n      }\r\n\r\n    async componentDidMount() {\r\n        const URL = 'https://randomuser.me/api/';\r\n        const response = await fetch(URL)\r\n        const data = await response.json()\r\n        this.setState({ user: data.results[0], loading: false });\r\n    }\r\n    render() {\r\n        if (this.state.loading) {\r\n            return <div style={{textAlign: 'center'}}>Something went wrong with loading data user :(</div>\r\n        }\r\n        // if (!this.state.user) {\r\n        //     return <div>Did not get a person</div>\r\n        // }\r\n\r\n        const user = this.state.user; //\r\n        return (\r\n            <div className='CardContainer'>\r\n                <Card \r\n                    picture = {user.picture.large}\r\n\r\n                    name = {user.name.first + '\\xa0' + user.name.last}\r\n\r\n                    email = {user.email}\r\n\r\n                    data = {user.dob.date}\r\n\r\n                    country = {user.location.country}\r\n                    city = {user.location.city}\r\n                    street = {user.location.street.name + '\\xa0' + user.location.street.number}\r\n\r\n                    phone = {user.phone}\r\n\r\n                    password = {user.login.password}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default CardContainer;","import React from \"react\";\nimport './App.css';\n\nimport CardContainer from \"./components/CardContainer\";\n\nconst App = () => <CardContainer />\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}